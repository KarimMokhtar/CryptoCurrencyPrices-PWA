{"version":3,"sources":["logo.svg","Today/Today.js","Past/SingleDay.js","Past/Past.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Today","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","btc","ltc","eth","_this2","axios","get","then","response","setState","data","BTC","USD","LTC","ETH","catch","error","react_default","a","createElement","className","Component","SingleDay","props","console","log","day","date","Past","priceOfDate","numberOfPastDays","tempDays","i","t","moment","subtract","unix","temp","format","push","getPastPrices","map","Past_SingleDay","key","App","href","target","rel","src_Today_Today","src_Past_Past","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d3a7b8d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\nimport './Today.css';\nimport axios from 'axios';\nclass Today extends Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tbtc : '',\n\t\t\tltc : '',\n\t\t\teth : '',\n\t\t}\n\t}\n\tcomponentWillMount(){\n\t\taxios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n\t\t.then(response=>{\n\t\t\tthis.setState({\n\t\t\t\tbtc : response.data.BTC.USD,\n\t\t\t\tltc : response.data.LTC.USD,\n\t\t\t\teth : response.data.ETH.USD\n\t\t\t});\n\t\t})\n\t\t.catch(error=>{\n\t\t\tthis.setState({\n\t\t\t\tbtc : '404 Price Not founed',\n\t\t\t\tltc : '404 Price Not founed',\n\t\t\t\teth : '404 Price Not founed'\n\t\t\t});\n\t\t})\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"today--section container\">\n\t\t\t\t<h2>Current Price</h2>\n\t\t\t\t<div className=\"columns today--section__box\">\n                    <div className=\"column btc--section\">\n                        <h5>${this.state.btc}</h5>\n                        <p>1 BTC</p>\n                    </div>\n                    <div className=\"column eth--section\">\n                        <h5>${this.state.eth}</h5>\n                        <p>1 ETH</p>\n                    </div>\n                    <div className=\"column ltc--section\">\n                        <h5>${this.state.ltc}</h5>\n                        <p>1 LTC</p>\n                    </div>\n                </div>\n\t\t\t</div>\n\n\t\t)\n\t}\n}\nexport default Today;","import React,{Component} from 'react';\nimport './Past.css';\nfunction SingleDay(props){\n    console.log(props.day,props.day.eth,props.day.date)\n\treturn(\n\t\t<div className=\"history--section__box__inner\">\n            <h4>{props.day.date}</h4>\n            <div className=\"columns\">\n                <div className=\"column\">\n                    <p>1 BTC = ${props.day.btc}</p>\n                </div>\n                <div className=\"column\">\n                    <p>1 ETH = ${props.day.eth}</p>\n                </div>\n                <div className=\"column\">\n                    <p>1 LTC = ${props.day.ltc}</p>\n                </div>\n            </div>\n        </div>\n\t)\n}\n\nexport default SingleDay;","import React,{Component} from 'react';\nimport axios from 'axios';\nimport './Past.css';\nimport SingleDay from './SingleDay';\nimport moment from 'moment';\n\nclass Past extends Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tpriceOfDate :[],\n\t\t}\n\t}\n\tasync getPastPrices(){\n\t\tvar  numberOfPastDays = 5;\n\t\tlet tempDays = [];\n\t\tfor(let i = 1 ; i <= numberOfPastDays; ++i){\n\t\t\tlet t = moment().subtract(i,'days').unix();\n\t\t\tconsole.log(t)\n\t\t\tlet temp = {date : moment.unix(t).format(\"MMMM Do YYYY\")}\n\t\t\tawait axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD&ts=' + t)\n\t\t\t.then(response=>{\n\t\t\t\ttemp.btc = response.data.BTC.USD;\n\t\t\t\ttemp.ltc = response.data.LTC.USD;\n\t\t\t\ttemp.eth = response.data.ETH.USD;\n\t\t\t})\n\t\t\t.catch(error=>{\n\t\t\t\ttemp.btc = '404 Price Not founed';\n\t\t\t\ttemp.ltc = '404 Price Not founed';\n\t\t\t\ttemp.eth = '404 Price Not founed';\n\t\t\t})\n\t\t\ttempDays.push(temp)\n\t\t}\n\t\tthis.setState({priceOfDate:tempDays});\n\t}\n\tcomponentWillMount(){\n\t\tthis.getPastPrices();\n\t}\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"history--section container\">\n\t\t\t<h2>History (Past 5 days)</h2>\n\t\t\t\t<div className=\"history--section__box\">\n\t\t\t\t\t{this.state.priceOfDate.map((day,i)=><SingleDay key={i} day = {day} />)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\nexport default Past;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Today from './Today/Today'; \nimport Past from './Past/Past';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"topheader\">\n            <header className=\"container\">\n                <nav className=\"navbar\">\n                    <div className=\"navbar-brand\">\n                        <span className=\"navbar-item\">Cryptocurency Prices</span>\n                    </div>\n                    <div className=\"navbar-end\">\n                        <a className=\"navbar-item\" href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">Cryptoprice.com</a>\n                    </div>\n                </nav>\n            </header>\n        </div>\n         <section className=\"results--section\">\n            <div className=\"container\">\n                <h1>CryptoPrice is a realtime price information about<br></br> BTC, ETH and LTC.</h1>\n            </div>\n            <div className=\"results--section__inner\">\n                <Today />\n                <Past /> \n            </div>\n        </section>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}